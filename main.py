# ENCODED BY : HACKER(THE YADUVANSHI)
# ENCRYPTION : Py3 BASE64
# FACEBOOK : https://www.facebook.com/hackesofice 
# INSTAGRAM : https://www.instagram.com/hackesofice 

import base64
exec(base64.b64decode(""))
